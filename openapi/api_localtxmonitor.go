/*
cardano-node-api

Cardano Node API

API version: 1.0
Contact: support@blinklabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type LocaltxmonitorAPI interface {

	/*
	LocaltxmonitorHasTxTxHashGet Check if a particular TX exists in the mempool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param txHash Transaction hash (hex string)
	@return LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest
	*/
	LocaltxmonitorHasTxTxHashGet(ctx context.Context, txHash string) LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest

	// LocaltxmonitorHasTxTxHashGetExecute executes the request
	//  @return ApiResponseLocalTxMonitorHasTx
	LocaltxmonitorHasTxTxHashGetExecute(r LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest) (*ApiResponseLocalTxMonitorHasTx, *http.Response, error)

	/*
	LocaltxmonitorSizesGet Get mempool capacity, size, and TX count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocaltxmonitorAPILocaltxmonitorSizesGetRequest
	*/
	LocaltxmonitorSizesGet(ctx context.Context) LocaltxmonitorAPILocaltxmonitorSizesGetRequest

	// LocaltxmonitorSizesGetExecute executes the request
	//  @return ApiResponseLocalTxMonitorSizes
	LocaltxmonitorSizesGetExecute(r LocaltxmonitorAPILocaltxmonitorSizesGetRequest) (*ApiResponseLocalTxMonitorSizes, *http.Response, error)

	/*
	LocaltxmonitorTxsGet List all transactions in the mempool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocaltxmonitorAPILocaltxmonitorTxsGetRequest
	*/
	LocaltxmonitorTxsGet(ctx context.Context) LocaltxmonitorAPILocaltxmonitorTxsGetRequest

	// LocaltxmonitorTxsGetExecute executes the request
	//  @return []ApiResponseLocalTxMonitorTxs
	LocaltxmonitorTxsGetExecute(r LocaltxmonitorAPILocaltxmonitorTxsGetRequest) ([]ApiResponseLocalTxMonitorTxs, *http.Response, error)
}

// LocaltxmonitorAPIService LocaltxmonitorAPI service
type LocaltxmonitorAPIService service

type LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest struct {
	ctx context.Context
	ApiService LocaltxmonitorAPI
	txHash string
}

func (r LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest) Execute() (*ApiResponseLocalTxMonitorHasTx, *http.Response, error) {
	return r.ApiService.LocaltxmonitorHasTxTxHashGetExecute(r)
}

/*
LocaltxmonitorHasTxTxHashGet Check if a particular TX exists in the mempool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param txHash Transaction hash (hex string)
 @return LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest
*/
func (a *LocaltxmonitorAPIService) LocaltxmonitorHasTxTxHashGet(ctx context.Context, txHash string) LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest {
	return LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest{
		ApiService: a,
		ctx: ctx,
		txHash: txHash,
	}
}

// Execute executes the request
//  @return ApiResponseLocalTxMonitorHasTx
func (a *LocaltxmonitorAPIService) LocaltxmonitorHasTxTxHashGetExecute(r LocaltxmonitorAPILocaltxmonitorHasTxTxHashGetRequest) (*ApiResponseLocalTxMonitorHasTx, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponseLocalTxMonitorHasTx
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocaltxmonitorAPIService.LocaltxmonitorHasTxTxHashGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localtxmonitor/has_tx/{tx_hash}"
	localVarPath = strings.Replace(localVarPath, "{"+"tx_hash"+"}", url.PathEscape(parameterValueToString(r.txHash, "txHash")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocaltxmonitorAPILocaltxmonitorSizesGetRequest struct {
	ctx context.Context
	ApiService LocaltxmonitorAPI
}

func (r LocaltxmonitorAPILocaltxmonitorSizesGetRequest) Execute() (*ApiResponseLocalTxMonitorSizes, *http.Response, error) {
	return r.ApiService.LocaltxmonitorSizesGetExecute(r)
}

/*
LocaltxmonitorSizesGet Get mempool capacity, size, and TX count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocaltxmonitorAPILocaltxmonitorSizesGetRequest
*/
func (a *LocaltxmonitorAPIService) LocaltxmonitorSizesGet(ctx context.Context) LocaltxmonitorAPILocaltxmonitorSizesGetRequest {
	return LocaltxmonitorAPILocaltxmonitorSizesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponseLocalTxMonitorSizes
func (a *LocaltxmonitorAPIService) LocaltxmonitorSizesGetExecute(r LocaltxmonitorAPILocaltxmonitorSizesGetRequest) (*ApiResponseLocalTxMonitorSizes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponseLocalTxMonitorSizes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocaltxmonitorAPIService.LocaltxmonitorSizesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localtxmonitor/sizes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocaltxmonitorAPILocaltxmonitorTxsGetRequest struct {
	ctx context.Context
	ApiService LocaltxmonitorAPI
}

func (r LocaltxmonitorAPILocaltxmonitorTxsGetRequest) Execute() ([]ApiResponseLocalTxMonitorTxs, *http.Response, error) {
	return r.ApiService.LocaltxmonitorTxsGetExecute(r)
}

/*
LocaltxmonitorTxsGet List all transactions in the mempool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocaltxmonitorAPILocaltxmonitorTxsGetRequest
*/
func (a *LocaltxmonitorAPIService) LocaltxmonitorTxsGet(ctx context.Context) LocaltxmonitorAPILocaltxmonitorTxsGetRequest {
	return LocaltxmonitorAPILocaltxmonitorTxsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ApiResponseLocalTxMonitorTxs
func (a *LocaltxmonitorAPIService) LocaltxmonitorTxsGetExecute(r LocaltxmonitorAPILocaltxmonitorTxsGetRequest) ([]ApiResponseLocalTxMonitorTxs, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiResponseLocalTxMonitorTxs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocaltxmonitorAPIService.LocaltxmonitorTxsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localtxmonitor/txs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
