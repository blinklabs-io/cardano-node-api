/*
cardano-node-api

Cardano Node API

API version: 1.0
Contact: support@blinklabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type LocalstatequeryAPI interface {

	/*
	LocalstatequeryCurrentEraGet Query Current Era

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalstatequeryAPILocalstatequeryCurrentEraGetRequest
	*/
	LocalstatequeryCurrentEraGet(ctx context.Context) LocalstatequeryAPILocalstatequeryCurrentEraGetRequest

	// LocalstatequeryCurrentEraGetExecute executes the request
	//  @return ApiResponseLocalStateQueryCurrentEra
	LocalstatequeryCurrentEraGetExecute(r LocalstatequeryAPILocalstatequeryCurrentEraGetRequest) (*ApiResponseLocalStateQueryCurrentEra, *http.Response, error)

	/*
	LocalstatequeryEraHistoryGet Query Era History

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalstatequeryAPILocalstatequeryEraHistoryGetRequest
	*/
	LocalstatequeryEraHistoryGet(ctx context.Context) LocalstatequeryAPILocalstatequeryEraHistoryGetRequest

	// LocalstatequeryEraHistoryGetExecute executes the request
	//  @return map[string]interface{}
	LocalstatequeryEraHistoryGetExecute(r LocalstatequeryAPILocalstatequeryEraHistoryGetRequest) (map[string]interface{}, *http.Response, error)

	/*
	LocalstatequeryGenesisConfigGet Query Genesis Config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest
	*/
	LocalstatequeryGenesisConfigGet(ctx context.Context) LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest

	// LocalstatequeryGenesisConfigGetExecute executes the request
	//  @return map[string]interface{}
	LocalstatequeryGenesisConfigGetExecute(r LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest) (map[string]interface{}, *http.Response, error)

	/*
	LocalstatequeryProtocolParamsGet Query Current Protocol Parameters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest
	*/
	LocalstatequeryProtocolParamsGet(ctx context.Context) LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest

	// LocalstatequeryProtocolParamsGetExecute executes the request
	//  @return map[string]interface{}
	LocalstatequeryProtocolParamsGetExecute(r LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest) (map[string]interface{}, *http.Response, error)

	/*
	LocalstatequerySystemStartGet Query System Start

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalstatequeryAPILocalstatequerySystemStartGetRequest
	*/
	LocalstatequerySystemStartGet(ctx context.Context) LocalstatequeryAPILocalstatequerySystemStartGetRequest

	// LocalstatequerySystemStartGetExecute executes the request
	//  @return ApiResponseLocalStateQuerySystemStart
	LocalstatequerySystemStartGetExecute(r LocalstatequeryAPILocalstatequerySystemStartGetRequest) (*ApiResponseLocalStateQuerySystemStart, *http.Response, error)

	/*
	LocalstatequeryTipGet Query Chain Tip

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalstatequeryAPILocalstatequeryTipGetRequest
	*/
	LocalstatequeryTipGet(ctx context.Context) LocalstatequeryAPILocalstatequeryTipGetRequest

	// LocalstatequeryTipGetExecute executes the request
	//  @return ApiResponseLocalStateQueryTip
	LocalstatequeryTipGetExecute(r LocalstatequeryAPILocalstatequeryTipGetRequest) (*ApiResponseLocalStateQueryTip, *http.Response, error)
}

// LocalstatequeryAPIService LocalstatequeryAPI service
type LocalstatequeryAPIService service

type LocalstatequeryAPILocalstatequeryCurrentEraGetRequest struct {
	ctx context.Context
	ApiService LocalstatequeryAPI
}

func (r LocalstatequeryAPILocalstatequeryCurrentEraGetRequest) Execute() (*ApiResponseLocalStateQueryCurrentEra, *http.Response, error) {
	return r.ApiService.LocalstatequeryCurrentEraGetExecute(r)
}

/*
LocalstatequeryCurrentEraGet Query Current Era

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalstatequeryAPILocalstatequeryCurrentEraGetRequest
*/
func (a *LocalstatequeryAPIService) LocalstatequeryCurrentEraGet(ctx context.Context) LocalstatequeryAPILocalstatequeryCurrentEraGetRequest {
	return LocalstatequeryAPILocalstatequeryCurrentEraGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponseLocalStateQueryCurrentEra
func (a *LocalstatequeryAPIService) LocalstatequeryCurrentEraGetExecute(r LocalstatequeryAPILocalstatequeryCurrentEraGetRequest) (*ApiResponseLocalStateQueryCurrentEra, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponseLocalStateQueryCurrentEra
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalstatequeryAPIService.LocalstatequeryCurrentEraGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localstatequery/current-era"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalstatequeryAPILocalstatequeryEraHistoryGetRequest struct {
	ctx context.Context
	ApiService LocalstatequeryAPI
}

func (r LocalstatequeryAPILocalstatequeryEraHistoryGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.LocalstatequeryEraHistoryGetExecute(r)
}

/*
LocalstatequeryEraHistoryGet Query Era History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalstatequeryAPILocalstatequeryEraHistoryGetRequest
*/
func (a *LocalstatequeryAPIService) LocalstatequeryEraHistoryGet(ctx context.Context) LocalstatequeryAPILocalstatequeryEraHistoryGetRequest {
	return LocalstatequeryAPILocalstatequeryEraHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *LocalstatequeryAPIService) LocalstatequeryEraHistoryGetExecute(r LocalstatequeryAPILocalstatequeryEraHistoryGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalstatequeryAPIService.LocalstatequeryEraHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localstatequery/era-history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest struct {
	ctx context.Context
	ApiService LocalstatequeryAPI
}

func (r LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.LocalstatequeryGenesisConfigGetExecute(r)
}

/*
LocalstatequeryGenesisConfigGet Query Genesis Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest
*/
func (a *LocalstatequeryAPIService) LocalstatequeryGenesisConfigGet(ctx context.Context) LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest {
	return LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *LocalstatequeryAPIService) LocalstatequeryGenesisConfigGetExecute(r LocalstatequeryAPILocalstatequeryGenesisConfigGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalstatequeryAPIService.LocalstatequeryGenesisConfigGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localstatequery/genesis-config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest struct {
	ctx context.Context
	ApiService LocalstatequeryAPI
}

func (r LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.LocalstatequeryProtocolParamsGetExecute(r)
}

/*
LocalstatequeryProtocolParamsGet Query Current Protocol Parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest
*/
func (a *LocalstatequeryAPIService) LocalstatequeryProtocolParamsGet(ctx context.Context) LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest {
	return LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *LocalstatequeryAPIService) LocalstatequeryProtocolParamsGetExecute(r LocalstatequeryAPILocalstatequeryProtocolParamsGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalstatequeryAPIService.LocalstatequeryProtocolParamsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localstatequery/protocol-params"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalstatequeryAPILocalstatequerySystemStartGetRequest struct {
	ctx context.Context
	ApiService LocalstatequeryAPI
}

func (r LocalstatequeryAPILocalstatequerySystemStartGetRequest) Execute() (*ApiResponseLocalStateQuerySystemStart, *http.Response, error) {
	return r.ApiService.LocalstatequerySystemStartGetExecute(r)
}

/*
LocalstatequerySystemStartGet Query System Start

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalstatequeryAPILocalstatequerySystemStartGetRequest
*/
func (a *LocalstatequeryAPIService) LocalstatequerySystemStartGet(ctx context.Context) LocalstatequeryAPILocalstatequerySystemStartGetRequest {
	return LocalstatequeryAPILocalstatequerySystemStartGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponseLocalStateQuerySystemStart
func (a *LocalstatequeryAPIService) LocalstatequerySystemStartGetExecute(r LocalstatequeryAPILocalstatequerySystemStartGetRequest) (*ApiResponseLocalStateQuerySystemStart, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponseLocalStateQuerySystemStart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalstatequeryAPIService.LocalstatequerySystemStartGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localstatequery/system-start"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalstatequeryAPILocalstatequeryTipGetRequest struct {
	ctx context.Context
	ApiService LocalstatequeryAPI
}

func (r LocalstatequeryAPILocalstatequeryTipGetRequest) Execute() (*ApiResponseLocalStateQueryTip, *http.Response, error) {
	return r.ApiService.LocalstatequeryTipGetExecute(r)
}

/*
LocalstatequeryTipGet Query Chain Tip

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalstatequeryAPILocalstatequeryTipGetRequest
*/
func (a *LocalstatequeryAPIService) LocalstatequeryTipGet(ctx context.Context) LocalstatequeryAPILocalstatequeryTipGetRequest {
	return LocalstatequeryAPILocalstatequeryTipGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponseLocalStateQueryTip
func (a *LocalstatequeryAPIService) LocalstatequeryTipGetExecute(r LocalstatequeryAPILocalstatequeryTipGetRequest) (*ApiResponseLocalStateQueryTip, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponseLocalStateQueryTip
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalstatequeryAPIService.LocalstatequeryTipGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localstatequery/tip"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
