/*
cardano-node-api

Cardano Node API

API version: 1.0
Contact: support@blinklabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type ChainsyncAPI interface {

	/*
	ChainsyncSyncGet Start a chain-sync using a websocket for events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ChainsyncAPIChainsyncSyncGetRequest
	*/
	ChainsyncSyncGet(ctx context.Context) ChainsyncAPIChainsyncSyncGetRequest

	// ChainsyncSyncGetExecute executes the request
	ChainsyncSyncGetExecute(r ChainsyncAPIChainsyncSyncGetRequest) (*http.Response, error)
}

// ChainsyncAPIService ChainsyncAPI service
type ChainsyncAPIService service

type ChainsyncAPIChainsyncSyncGetRequest struct {
	ctx context.Context
	ApiService ChainsyncAPI
	tip *bool
	slot *int32
	hash *string
}

// whether to start from the current tip
func (r ChainsyncAPIChainsyncSyncGetRequest) Tip(tip bool) ChainsyncAPIChainsyncSyncGetRequest {
	r.tip = &tip
	return r
}

// slot to start sync at, should match hash
func (r ChainsyncAPIChainsyncSyncGetRequest) Slot(slot int32) ChainsyncAPIChainsyncSyncGetRequest {
	r.slot = &slot
	return r
}

// block hash to start sync at, should match slot
func (r ChainsyncAPIChainsyncSyncGetRequest) Hash(hash string) ChainsyncAPIChainsyncSyncGetRequest {
	r.hash = &hash
	return r
}

func (r ChainsyncAPIChainsyncSyncGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChainsyncSyncGetExecute(r)
}

/*
ChainsyncSyncGet Start a chain-sync using a websocket for events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ChainsyncAPIChainsyncSyncGetRequest
*/
func (a *ChainsyncAPIService) ChainsyncSyncGet(ctx context.Context) ChainsyncAPIChainsyncSyncGetRequest {
	return ChainsyncAPIChainsyncSyncGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ChainsyncAPIService) ChainsyncSyncGetExecute(r ChainsyncAPIChainsyncSyncGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChainsyncAPIService.ChainsyncSyncGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chainsync/sync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tip", r.tip, "")
	}
	if r.slot != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slot", r.slot, "")
	}
	if r.hash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hash", r.hash, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiResponseApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
